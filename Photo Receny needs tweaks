{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyPD1VHegkPDIx2bp5vTnRMa",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/greekfreek23/ALPlumbersSite/blob/main/Photo%20Receny%20needs%20tweaks\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Upgrade gspread (if needed)\n",
        "!pip install --upgrade gspread\n",
        "\n",
        "# Import Colab auth and authenticate interactively\n",
        "from google.colab import auth\n",
        "auth.authenticate_user()\n",
        "\n",
        "import gspread\n",
        "import google.auth\n",
        "import pandas as pd\n",
        "import datetime\n",
        "\n",
        "# Get credentials using google.auth and authorize gspread\n",
        "creds, _ = google.auth.default(scopes=[\n",
        "    \"https://www.googleapis.com/auth/spreadsheets\",\n",
        "    \"https://www.googleapis.com/auth/drive\"\n",
        "])\n",
        "gc = gspread.authorize(creds)\n",
        "\n",
        "# Open the spreadsheets by their IDs\n",
        "no_site_spreadsheet = gc.open_by_key(\"1_wYVw_ATdbtJaJ7eOQZbmiqcZyFdyLXNcNuWdV6HNLI\")\n",
        "with_site_spreadsheet = gc.open_by_key(\"1MNJQslyZ-TcIwGSTWBar2FUJyRu6wSKg8m_n5wc6BGc\")\n",
        "photos_spreadsheet = gc.open_by_key(\"1DCI-5JHE_2ZQ1bhBaQia1NOPPtD5MEFIPQCoyqgSqO0\")\n",
        "\n",
        "# Get the first worksheet from each spreadsheet\n",
        "sheet_no_site = no_site_spreadsheet.sheet1\n",
        "sheet_with_site = with_site_spreadsheet.sheet1\n",
        "sheet_photos = photos_spreadsheet.sheet1\n",
        "\n",
        "# Convert the sheet data to DataFrames\n",
        "df_no_site = pd.DataFrame(sheet_no_site.get_all_records())\n",
        "df_with_site = pd.DataFrame(sheet_with_site.get_all_records())\n",
        "df_photos = pd.DataFrame(sheet_photos.get_all_records())\n",
        "\n",
        "def photo_score(photo_date):\n",
        "    \"\"\"Return a single score based on the full scoring system:\n",
        "    10: Photos within past 30 days\n",
        "    8: Photos within past 90 days\n",
        "    6: Photos within past 180 days\n",
        "    4: Photos within past 365 days\n",
        "    2: Photos within past 2 years\n",
        "    1: Has any photos (older than 2 years)\n",
        "    0: No photos\n",
        "    \"\"\"\n",
        "    if pd.isnull(photo_date):\n",
        "        return 0  # Changed to return 0 for no photos\n",
        "\n",
        "    days_diff = (datetime.datetime.now() - photo_date).days\n",
        "\n",
        "    if days_diff <= 50:\n",
        "        return 10\n",
        "    elif days_diff <= 90:\n",
        "        return 8\n",
        "    elif days_diff <= 180:\n",
        "        return 6\n",
        "    elif days_diff <= 365:\n",
        "        return 4\n",
        "    elif days_diff <= (2 * 365):  # Within 2 years\n",
        "        return 2    # Changed from 3 to 2\n",
        "    else:\n",
        "        return 1    # Changed from 2 to 1\n",
        "\n",
        "# Convert photo dates and calculate scores\n",
        "df_photos['photo_date'] = pd.to_datetime(df_photos['photo_date'], errors='coerce')\n",
        "df_latest = df_photos.groupby('place_id')['photo_date'].max().reset_index()\n",
        "df_latest['photo_score'] = df_latest['photo_date'].apply(photo_score)\n",
        "\n",
        "# Function to update a worksheet with scores\n",
        "def update_worksheet_with_scores(df, worksheet, scores_df):\n",
        "    # Get current headers\n",
        "    headers = df.columns.tolist()\n",
        "\n",
        "    # Add photo_score column if it doesn't exist\n",
        "    if 'photo_score' not in headers:\n",
        "        headers.append('photo_score')\n",
        "\n",
        "    # Create scores dictionary for faster lookup\n",
        "    scores_dict = dict(zip(scores_df['place_id'], scores_df['photo_score']))\n",
        "\n",
        "    # Add scores to the DataFrame\n",
        "    df['photo_score'] = df['place_id'].map(scores_dict).fillna(0)  # Changed default to 0 for no photos\n",
        "\n",
        "    # Convert DataFrame to list of lists for updating\n",
        "    values = [headers]  # First row is headers\n",
        "    values.extend(df[headers].values.tolist())\n",
        "\n",
        "    # Update the entire worksheet\n",
        "    worksheet.clear()\n",
        "    worksheet.update(values)\n",
        "\n",
        "    return len(df)\n",
        "\n",
        "# Update both worksheets\n",
        "print(\"Updating worksheet for businesses without sites...\")\n",
        "rows_updated_no_site = update_worksheet_with_scores(df_no_site, sheet_no_site, df_latest)\n",
        "\n",
        "print(\"Updating worksheet for businesses with sites...\")\n",
        "rows_updated_with_site = update_worksheet_with_scores(df_with_site, sheet_with_site, df_latest)\n",
        "\n",
        "print(f\"Updated {rows_updated_no_site} rows in no-site worksheet\")\n",
        "print(f\"Updated {rows_updated_with_site} rows in with-site worksheet\")\n",
        "\n",
        "# Print sample of scores for verification\n",
        "print(\"\\nSample of scores:\")\n",
        "sample_scores = df_latest[['place_id', 'photo_date', 'photo_score']].head()\n",
        "print(sample_scores)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JK098FOzOJWE",
        "outputId": "107bbd9a-ada4-4cf5-bd7a-305f31d64154"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: gspread in /usr/local/lib/python3.11/dist-packages (6.1.4)\n",
            "Requirement already satisfied: google-auth>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from gspread) (2.27.0)\n",
            "Requirement already satisfied: google-auth-oauthlib>=0.4.1 in /usr/local/lib/python3.11/dist-packages (from gspread) (1.2.1)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.12.0->gspread) (5.5.1)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.12.0->gspread) (0.4.1)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.12.0->gspread) (4.9)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from google-auth-oauthlib>=0.4.1->gspread) (2.0.0)\n",
            "Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=1.12.0->gspread) (0.6.1)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread) (3.2.2)\n",
            "Requirement already satisfied: requests>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread) (2.32.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.0.0->requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.0.0->requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.0.0->requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.0.0->requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread) (2025.1.31)\n",
            "Updating worksheet for businesses without sites...\n",
            "Updating worksheet for businesses with sites...\n",
            "Updated 853 rows in no-site worksheet\n",
            "Updated 1293 rows in with-site worksheet\n",
            "\n",
            "Sample of scores:\n",
            "                      place_id          photo_date  photo_score\n",
            "0  ChIJ-YgpTZOSbEkRKI3PhV_ADQ8 2023-03-27 11:00:00            2\n",
            "1  ChIJ-YySMcNrYogRiYXsa4OUKxM 2024-01-28 05:00:00            2\n",
            "2  ChIJ-zJL0fvRjIgRt2yxMzTxDs0 2022-08-23 23:00:00            1\n",
            "3  ChIJ03d8EYxs4kcRGIeKk8t7N-A 2024-10-12 20:00:00            6\n",
            "4  ChIJ0492c2rthogRiPpawgB8Og0 2021-02-26 19:00:00            1\n"
          ]
        }
      ]
    }
  ]
}